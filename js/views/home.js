// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Dot.Views.Home = (function(_super) {

    __extends(Home, _super);

    function Home() {
      return Home.__super__.constructor.apply(this, arguments);
    }

    Home.prototype.template = JST['home'];

    Home.prototype.el = "body";

    Home.prototype.colorViews = [];

    Home.prototype.initialize = function(key) {
      var _this = this;
      this.colors = new Dot.Collections.Colors();
      console.log(key);
      console.log(this.colors);
      this.render();
      return this.colors.fetch({
        success: function() {
          return _this.loadCards();
        }
      });
    };

    Home.prototype.render = function() {
      $(this.el).html(this.template());
      this.$el.attr('class', 'container homePage');
      this.colorDebouncer = _.debounce(this.colorChanger, 10);
      return this.colorEl = this.$('#color');
    };

    Home.prototype.loadCards = function() {
      var color, _fn, _i, _len, _ref,
        _this = this;
      _ref = this.colors.models;
      _fn = function(color) {
        var vi;
        vi = new Dot.Views.ColorCard({
          color: color
        });
        _this.$('#roll').append(vi.el);
        return _this.colorViews.push(vi);
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        color = _ref[_i];
        _fn(color);
      }
      this.bindWaypoint();
      return this.checkColor();
    };

    Home.prototype.colorChanger = function() {
      var data,
        _this = this;
      data = this.currentColor.$el.find('[data-hex]');
      this.$el.css("backgroundColor", this.currentColorHex);
      return $('.colorizing').css("color", function() {
        if (_this.currentColorBrightness < 0.5) {
          return "hsl(0, 0%, 90%)";
        } else {
          return "hsl(0, 0%, 10%)";
        }
      });
    };

    Home.prototype.bindWaypoint = function() {
      var checker,
        _this = this;
      checker = _.debounce((function() {
        _this.windowPos = $(window).scrollTop();
        _this.windowHeight = $(window).height();
        return _this.checkColor();
      }), 20);
      return $(window).on('scroll', function(e) {
        return checker();
      });
    };

    Home.prototype.checkColor = function() {
      var color, pos, result, _i, _len, _ref;
      _ref = this.colorViews;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        color = _ref[_i];
        pos = color.$el.offset().top.toFixed(0);
        result = pos - this.windowPos;
        if ((result > 0) && (result < this.windowHeight)) {
          if (color === this.currentColor) {
            return false;
          }
          this.currentColor = color;
          this.currentColorHex = this.currentColor.$el.find('[data-hex]').data("hex");
          this.currentColorBrightness = this.currentColor.$el.find('[data-hex]').data("brightness");
          this.colorChanger();
        }
      }
    };

    return Home;

  })(Backbone.View);

}).call(this);
